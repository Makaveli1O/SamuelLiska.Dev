// <auto-generated />
using DataAccess.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.Property<uint>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GamesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CategoryGame");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.Feature", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Name = "ObjectPooling"
                        },
                        new
                        {
                            Id = 2u,
                            Name = "ProceduralGeneration"
                        },
                        new
                        {
                            Id = 3u,
                            Name = "PerlinNoise"
                        },
                        new
                        {
                            Id = 4u,
                            Name = "SaveSystemJSON"
                        },
                        new
                        {
                            Id = 5u,
                            Name = "PathfindingAI"
                        },
                        new
                        {
                            Id = 6u,
                            Name = "Chunks"
                        },
                        new
                        {
                            Id = 7u,
                            Name = "NavMesh"
                        },
                        new
                        {
                            Id = 8u,
                            Name = "AnimationSystem"
                        },
                        new
                        {
                            Id = 9u,
                            Name = "WorldGeneration"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Game", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebGLPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            CoverImagePath = "/images/games/brick_breaker_img_cover.jpg",
                            Description = "Control your paddle and destroy all the blocks!",
                            DetailedDescription = "Brick Breaker is a modern Unity-based arcade game featuring grid-based level design, modular block behaviors (explode, reflect, slow, move). Your job is to destroy all the blocks and obtain the highest score.",
                            Slug = "brick-breaker",
                            Title = "Brick Breaker",
                            WebGLPath = "https://play.unity.com/en/games/865b6456-69f2-4610-8c13-06cb84d4357a/brick-breakerwebbuild"
                        },
                        new
                        {
                            Id = 2u,
                            CoverImagePath = "/images/games/rpg_img_cover.jpg",
                            Description = "Fight monsters and obtain orbs to win!",
                            DetailedDescription = "The player is thrown into a generated world with the main objective of collecting all missing keys to finish the game. Each key is located in a different biome, and while biomes can repeat, each contains exactly one key. The difficulty varies by biome and its enemies, making each playthrough more variable as the player explores the world.",
                            Slug = "rpg-procedural",
                            Title = "Procedural Rpg",
                            WebGLPath = "https://play.unity.com/en/games/ce0cc483-47a9-4977-af17-0942d6862e83/procedural-rpg"
                        });
                });

            modelBuilder.Entity("GameFeature", b =>
                {
                    b.Property<uint>("FeaturesId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GamesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeaturesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameFeature");

                    b.HasData(
                        new
                        {
                            FeaturesId = 1u,
                            GamesId = 1u
                        },
                        new
                        {
                            FeaturesId = 1u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 2u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 3u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 4u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 5u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 6u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 7u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 8u,
                            GamesId = 2u
                        },
                        new
                        {
                            FeaturesId = 9u,
                            GamesId = 2u
                        });
                });

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.HasOne("Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameFeature", b =>
                {
                    b.HasOne("Domain.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
