// <auto-generated />
using DataAccess.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250729054349_CorrectedSeedingData")]
    partial class CorrectedSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.Property<uint>("CategoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GamesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CategoryGame");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Name = "Arcade"
                        },
                        new
                        {
                            Id = 2u,
                            Name = "Role-Playing Game"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Game", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebGLPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            CoverImagePath = "/images/reflect.jpg",
                            Description = "Control your paddle and destroy all the blocks!",
                            Slug = "brick-breaker",
                            Title = "Brick Breaker",
                            WebGLPath = "/games/reflect/index.html"
                        },
                        new
                        {
                            Id = 2u,
                            CoverImagePath = "/images/rpg.jpg",
                            Description = "Fight monsters and obtain orbs to win!",
                            Slug = "rpg-procedural",
                            Title = "Procedural Rpg",
                            WebGLPath = "/games/rpg/index.html"
                        });
                });

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.HasOne("Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
